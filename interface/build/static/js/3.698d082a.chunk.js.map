{"version":3,"sources":["../../../src/internal/request-batcher.ts","../../../src/api/alchemy-provider.ts","../../../src/internal/websocket-backfiller.ts","../../../src/api/alchemy-websocket-provider.ts","../../src/index.ts","../node_modules/websocket/lib/browser.js","../node_modules/es5-ext/global.js","../node_modules/websocket/lib/version.js"],"names":["RequestBatcher","sendBatchFn","maxBatchSize","arguments","length","undefined","_classCallCheck","pendingBatch","_createClass","key","value","request","inflightRequest","resolve","reject","promise","Promise","this","push","sendBatchRequest","pendingBatchTimer","setTimeout","_this","_context","abrupt","stop","_callee","batch","clearTimeout","map","inflight","_context2","then","result","forEach","index","payload","error","Error","message","code","data","_callee2","AlchemyProvider","_JsonRpcProvider","_inherits","_super2","_createSuper","config","_this2","apiKey","getApiKey","alchemyNetwork","getAlchemyNetwork","network","connection","getAlchemyConnectionInfo","url","throttleLimit","maxRetries","ethersNetwork","EthersNetwork","call","batchRequests","batcherConnection","Object","assign","headers","batcher","requests","fetchJson","JSON","stringify","modifyFormatter","_this3","_context3","next","_super","detectNetwork","sent","_callee3","logWarn","DEFAULT_ALCHEMY_API_KEY","method","params","_send","methodName","_this4","forceBatch","id","_nextId","jsonrpc","enqueueRequest","emit","action","deepCopy","provider","cache","indexOf","_cache","getResult","response","formatter","formats","val","concat","CustomNetworks","getNetwork","DEFAULT_NETWORK","values","Network","includes","join","type","getAlchemyHttpUrl","getAlchemyWsUrl","IS_BROWSER","VERSION","allowGzip","JsonRpcProvider","WebsocketBackfiller","maxBackfillBlocks","isCancelled","previousHeads","fromBlockNumber","throwIfCancelled","getBlockNumber","toBlockNumber","getHeadEventsInRange","Math","max","lastSeenBlockNumber","fromHex","number","minBlockNumber","getReorgHeads","reorgHeads","intermediateHeads","_toConsumableArray","filter","previousLogs","getLogsInRange","blockNumber","getCommonAncestor","commonAncestor","removedLogs","log","removed","fromBlockInclusive","Number","NEGATIVE_INFINITY","addedLogs","logIndex","newMax","send","blockNumberHex","toBlockExclusive","_context4","batchParts","i","toHex","sendBatch","blockHeads","toNewHeadsEvent","_callee4","_context5","oldEvent","getBlockByNumber","blockHead","hash","reverse","_callee5","_context6","_callee6","_context7","oldLog","blockHash","_callee7","_context8","rangeFilter","fromBlock","toBlock","_callee8","head","totalDifficulty","transactions","uncles","dedupeNewHeads","events","dedupe","event","dedupeLogs","items","getKey","keysSeen","Set","item","has","add","CANCELLED","RETAINED_EVENT_BLOCK_COUNT","AlchemyWebSocketProvider","_WebSocketProvider","wsConstructor","protocol","ws","SturdyWebSocket","_a","process","versions","node","require","w3cwebsocket","WebSocket","_events","virtualSubscriptionsById","Map","virtualIdsByPhysicalId","handleMessage","parse","Array","isArray","isResponse","isSubscriptionEvent","physicalId","subscription","virtualId","get","newHeadsSubscription","newHeadsMessage","isBackfilling","backfillBuffer","pastEvents","addToPastEventsBuffer","getNewHeadsBlockNumber","addToNewHeadsEventsBuffer","emitAndRememberEvent","rememberEvent","logsSubscription","logsMessage","getLogsBlockNumber","addToLogsEventsBuffer","emitEvent","handleReopen","clear","_makeCancelToken","cancelled","cancel","makeCancelToken","cancelBackfill","_step","_iterator","_createForOfIteratorHelper","_loop","__awaiter","_assertThisInitialized","_regeneratorRuntime","mark","_callee9","wrap","_context9","prev","resubscribeAndBackfill","t0","console","s","n","done","err","e","f","startHeartbeat","stopHeartbeatAndBackfill","heartbeatIntervalId","clearInterval","backfiller","addSocketListeners","noop","eventName","listener","_addEventListener","isAlchemyEvent","_off","_get","_getPrototypeOf","prototype","_removeAllListeners","_listenerCount","_listeners","once","verifyAlchemyEventName","EthersEvent","getAlchemyEventTag","_startEvent","ALCHEMY_EVENT_TYPES","customStartEvent","tag","param","processFunc","subIdPromise","_subIds","startingBlockNumber","_context10","all","subId","resolvedParams","set","sentEvents","_subs","_callee10","_get2","_len","args","_key","stopped","eventTag","apply","_stopEvent","parts","nextId","_ref","_context11","sendBatchConcurrently","_callee11","removeSocketListeners","listenerCount","_websocket","addEventListener","removeEventListener","_context12","withBackoffRetries","withTimeout","_this5","getNewHeadsBackfill","backfillEvents","emitNewHeadsEvent","getLogsBackfill","emitLogsEvent","finish","_callee12","emitGenericEvent","emitProcessFn","emitFunction","_this6","setInterval","_callee13","_context13","reconnect","req","_this7","_context14","_callee14","ALCHEMY_PENDING_TRANSACTIONS_EVENT_TYPE","fromAddress","toAddress","hashesOnly","_subscribe","AlchemySubscription","PENDING_TRANSACTIONS","ALCHEMY_MINED_TRANSACTIONS_EVENT_TYPE","addresses","includeRemoved","MINED_TRANSACTIONS","_getFilter","_this8","BigNumber","from","toNumber","_emitted","block","filterLog","_this9","removeAllListeners","found","_this10","WebSocketProvider","MIN_RETRY_DELAY","RETRY_BACKOFF_FACTOR","MAX_RETRY_DELAY","retryCount","shouldRetry","nextWaitTime","_context15","delay","min","_callee15","ms","race","_","currentBlockNumber","firstGoodIndex","findIndex","splice","protocolsOrOptions","options","onclose","onerror","onmessage","onopen","ondown","onreopen","CONNECTING","OPEN","CLOSING","CLOSED","hasBeenOpened","isClosed","messageBuffer","nextRetryTime","reconnectCount","lastKnownExtensions","lastKnownProtocol","listeners","protocols","applyDefaultOptions","openNewWebSocket","defineProperty","binaryTypeInternal","binaryType","sum","bufferedAmount","hasUnknownAmount","byteLength","ArrayBuffer","Blob","size","getDataByteLength","debugLog","extensions","close","reason","disposeSocket","shutdown","readyState","handleClose","dispatchEvent","dispatchEventOfType","l","connectTimeout","handleError","handleOpen","connectTimeoutId","clearConnectTimeout","allClearResetTime","allClearTimeoutId","clearAllClearTimeout","openTime","maxReconnectAttempts","shouldReconnect","stopReconnecting","getTooManyFailedReconnectsMessage","willReconnect","handleWillReconnect","willReconnectResolved","denialReason","reestablishConnection","minReconnectDelay","maxReconnectDelay","reconnectBackoffFactor","retryTime","retryTimeSeconds","debugReason","clearAllTimeouts","closeCode","slice","callListener","defaultPrevented","handleEvent","debug","DEFAULT_OPTIONS","POSITIVE_INFINITY","keys","_globalThis","globalThis","window","NativeWebSocket","MozWebSocket","websocket_version","W3CWebSocket","uri","prop","module","exports","naiveFallback","self","configurable","__global__","version"],"mappings":"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","file":"static/js/3.698d082a.chunk.js","sourcesContent":["import { JsonRpcRequest, JsonRpcResponse } from './internal-types';\n\n/** Maximum size of a batch on the rpc provider. */\nconst DEFAULT_MAX_REQUEST_BATCH_SIZE = 100;\n\n/** Timeout interval before the pending batch is sent. */\nconst DEFAULT_REQUEST_BATCH_DELAY_MS = 10;\n\n/**\n * Internal class to enqueue requests and automatically send/process batches.\n *\n * The underlying batching mechanism is loosely based on ethers.js's\n * `JsonRpcBatchProvider`.\n *\n * @internal\n */\nexport class RequestBatcher {\n  /** Timeout timer that periodically sends the pending batch. */\n  private pendingBatchTimer: NodeJS.Timer | undefined;\n\n  /**\n   * Array of enqueued requests along with the constructed promise handlers for\n   * each request.\n   */\n  private pendingBatch: Array<BatchRequest> = [];\n\n  constructor(\n    private readonly sendBatchFn: SendBatchFn,\n    private readonly maxBatchSize = DEFAULT_MAX_REQUEST_BATCH_SIZE\n  ) {}\n\n  /**\n   * Enqueues the provided request. The batch is immediately sent if the maximum\n   * batch size is reached. Otherwise, the request is enqueued onto a batch that\n   * is sent after 10ms.\n   *\n   * Returns a promise that resolves with the result of the request.\n   */\n  async enqueueRequest(request: JsonRpcRequest): Promise<any> {\n    const inflightRequest: BatchRequest = {\n      request,\n      resolve: undefined,\n      reject: undefined\n    };\n\n    const promise = new Promise((resolve, reject) => {\n      inflightRequest.resolve = resolve;\n      inflightRequest.reject = reject;\n    });\n\n    this.pendingBatch.push(inflightRequest);\n\n    if (this.pendingBatch.length === this.maxBatchSize) {\n      // Send batch immediately if we are at the maximum batch size.\n      void this.sendBatchRequest();\n    } else if (!this.pendingBatchTimer) {\n      // Schedule batch for next event loop + short duration\n      this.pendingBatchTimer = setTimeout(\n        () => this.sendBatchRequest(),\n        DEFAULT_REQUEST_BATCH_DELAY_MS\n      );\n    }\n\n    return promise;\n  }\n\n  /**\n   * Sends the currently queued batches and resets the batch and timer. Processes\n   * the batched response results back to the original promises.\n   */\n  private async sendBatchRequest(): Promise<void> {\n    // Get the current batch and clear it, so new requests\n    // go into the next batch\n    const batch = this.pendingBatch;\n    this.pendingBatch = [];\n    if (this.pendingBatchTimer) {\n      clearTimeout(this.pendingBatchTimer);\n      this.pendingBatchTimer = undefined;\n    }\n\n    // Get the request as an array of requests\n    const request = batch.map(inflight => inflight.request);\n\n    return this.sendBatchFn(request).then(\n      result => {\n        // For each result, feed it to the correct Promise, depending\n        // on whether it was a success or error\n        batch.forEach((inflightRequest, index) => {\n          const payload = result[index];\n          if (payload.error) {\n            const error = new Error(payload.error.message);\n            (error as any).code = payload.error.code;\n            (error as any).data = payload.error.data;\n            inflightRequest.reject!(error);\n          } else {\n            inflightRequest.resolve!(payload.result);\n          }\n        });\n      },\n      error => {\n        batch.forEach(inflightRequest => {\n          inflightRequest.reject!(error);\n        });\n      }\n    );\n  }\n}\n\n/** Function type to match the `fetchJson` function in ethers. */\ntype SendBatchFn = (reqs: JsonRpcRequest[]) => Promise<JsonRpcResponse[]>;\n\n/**\n * Internal interface to represent a request on a batch along with the promises to resolve it.\n */\ninterface BatchRequest {\n  request: JsonRpcRequest;\n  resolve?: (result: any) => void;\n  reject?: (error: Error) => void;\n}\n","import {\n  Network as NetworkFromEthers,\n  Networkish,\n  getNetwork as getNetworkFromEthers\n} from '@ethersproject/networks';\nimport { deepCopy } from '@ethersproject/properties';\nimport {\n  CommunityResourcable,\n  JsonRpcProvider\n} from '@ethersproject/providers';\nimport { ConnectionInfo, fetchJson } from '@ethersproject/web';\n\nimport { JsonRpcRequest, JsonRpcResponse } from '../internal/internal-types';\nimport { RequestBatcher } from '../internal/request-batcher';\nimport { Network } from '../types/types';\nimport {\n  CustomNetworks,\n  DEFAULT_ALCHEMY_API_KEY,\n  DEFAULT_NETWORK,\n  EthersNetwork,\n  getAlchemyHttpUrl,\n  getAlchemyWsUrl\n} from '../util/const';\nimport { logWarn } from '../util/logger';\nimport { IS_BROWSER } from '../util/util';\nimport { VERSION } from '../version';\nimport { AlchemyConfig } from './alchemy-config';\n\n/**\n * SDK's custom implementation of ethers.js's 'AlchemyProvider'.\n *\n * Do not call this constructor directly. Instead, instantiate an instance of\n * {@link Alchemy} and call {@link Alchemy.config.getProvider()}.\n *\n * @public\n */\nexport class AlchemyProvider\n  extends JsonRpcProvider\n  implements CommunityResourcable\n{\n  readonly apiKey: string;\n  readonly maxRetries: number;\n  readonly batchRequests: boolean;\n\n  /**\n   * VISIBLE ONLY FOR TESTING\n   *@internal\n   */\n  readonly batcher: RequestBatcher;\n\n  /** @internal */\n  constructor(config: AlchemyConfig) {\n    // Normalize the API Key to a string.\n    const apiKey = AlchemyProvider.getApiKey(config.apiKey);\n\n    // Generate our own connection info with the correct endpoint URLs.\n    const alchemyNetwork = AlchemyProvider.getAlchemyNetwork(config.network);\n    const connection = AlchemyProvider.getAlchemyConnectionInfo(\n      alchemyNetwork,\n      apiKey,\n      'http'\n    );\n\n    // If a hardcoded url was specified in the config, use that instead of the\n    // provided apiKey or network.\n    if (config.url !== undefined) {\n      connection.url = config.url;\n    }\n\n    connection.throttleLimit = config.maxRetries;\n\n    // Normalize the Alchemy named network input to the network names used by\n    // ethers. This allows the parent super constructor in JsonRpcProvider to\n    // correctly set the network.\n    const ethersNetwork = EthersNetwork[alchemyNetwork];\n    super(connection, ethersNetwork);\n\n    this.apiKey = config.apiKey;\n    this.maxRetries = config.maxRetries;\n    this.batchRequests = config.batchRequests;\n\n    // TODO: support individual headers when calling batch\n    const batcherConnection = {\n      ...this.connection,\n      headers: {\n        ...this.connection.headers,\n        'Alchemy-Ethers-Sdk-Method': 'batchSend'\n      }\n    };\n    const sendBatchFn = (\n      requests: JsonRpcRequest[]\n    ): Promise<JsonRpcResponse[]> => {\n      return fetchJson(batcherConnection, JSON.stringify(requests));\n    };\n    this.batcher = new RequestBatcher(sendBatchFn);\n\n    this.modifyFormatter();\n  }\n\n  /**\n   * Overrides the `UrlJsonRpcProvider.getApiKey` method as implemented by\n   * ethers.js. Returns the API key for an Alchemy provider.\n   *\n   * @internal\n   * @override\n   */\n  static getApiKey(apiKey: any): string {\n    if (apiKey == null) {\n      return DEFAULT_ALCHEMY_API_KEY;\n    }\n    if (apiKey && typeof apiKey !== 'string') {\n      throw new Error(\n        `Invalid apiKey '${apiKey}' provided. apiKey must be a string.`\n      );\n    }\n    return apiKey;\n  }\n\n  /**\n   * Overrides the `BaseProvider.getNetwork` method as implemented by ethers.js.\n   *\n   * This override allows the SDK to set the provider's network to values not\n   * yet supported by ethers.js.\n   *\n   * @internal\n   * @override\n   */\n  static getNetwork(network: Networkish): NetworkFromEthers {\n    if (typeof network === 'string' && network in CustomNetworks) {\n      return CustomNetworks[network];\n    }\n\n    // Call the standard ethers.js getNetwork method for other networks.\n    return getNetworkFromEthers(network);\n  }\n\n  /**\n   * Converts the `Networkish` input to the network enum used by Alchemy.\n   *\n   * @internal\n   */\n  static getAlchemyNetwork(network?: Networkish): Network {\n    if (network === undefined) {\n      return DEFAULT_NETWORK;\n    }\n\n    if (typeof network === 'number') {\n      throw new Error(\n        `Invalid network '${network}' provided. Network must be a string.`\n      );\n    }\n\n    // Guaranteed that `typeof network === 'string`.\n    const isValidNetwork = Object.values(Network).includes(network as Network);\n    if (!isValidNetwork) {\n      throw new Error(\n        `Invalid network '${network}' provided. Network must be one of: ` +\n          `${Object.values(Network).join(', ')}.`\n      );\n    }\n    return network as Network;\n  }\n\n  /**\n   * Returns a {@link ConnectionInfo} object compatible with ethers that contains\n   * the correct URLs for Alchemy.\n   *\n   * @internal\n   */\n  static getAlchemyConnectionInfo(\n    network: Network,\n    apiKey: string,\n    type: 'wss' | 'http'\n  ): ConnectionInfo {\n    const url =\n      type === 'http'\n        ? getAlchemyHttpUrl(network, apiKey)\n        : getAlchemyWsUrl(network, apiKey);\n    return {\n      headers: IS_BROWSER\n        ? {\n            'Alchemy-Ethers-Sdk-Version': VERSION\n          }\n        : {\n            'Alchemy-Ethers-Sdk-Version': VERSION,\n            'Accept-Encoding': 'gzip'\n          },\n      allowGzip: true,\n      url\n    };\n  }\n\n  /**\n   * Overrides the method in ethers.js's `StaticJsonRpcProvider` class. This\n   * method is called when calling methods on the parent class `BaseProvider`.\n   *\n   * @override\n   */\n  async detectNetwork(): Promise<NetworkFromEthers> {\n    let network = this.network;\n    if (network == null) {\n      network = await super.detectNetwork();\n\n      if (!network) {\n        throw new Error('No network detected');\n      }\n    }\n    return network;\n  }\n\n  _startPending(): void {\n    logWarn('WARNING: Alchemy Provider does not support pending filters');\n  }\n\n  /**\n   * Overrides the ether's `isCommunityResource()` method. Returns true if the\n   * current api key is the default key.\n   *\n   * @override\n   */\n  isCommunityResource(): boolean {\n    return this.apiKey === DEFAULT_ALCHEMY_API_KEY;\n  }\n\n  /**\n   * Overrides the base {@link JsonRpcProvider.send} method to implement custom\n   * logic for sending requests to Alchemy.\n   *\n   * @param method The method name to use for the request.\n   * @param params The parameters to use for the request.\n   * @override\n   * @public\n   */\n  // TODO: Add headers for `perform()` override.\n  send(method: string, params: Array<any>): Promise<any> {\n    return this._send(method, params, 'send');\n  }\n\n  /**\n   * DO NOT MODIFY.\n   *\n   * Original code copied over from ether.js's `JsonRpcProvider.send()`.\n   *\n   * This method is copied over directly in order to implement custom headers\n   *\n   * @internal\n   */\n  _send(\n    method: string,\n    params: Array<any>,\n    methodName: string,\n    forceBatch = false\n  ): Promise<any> {\n    const request = {\n      method,\n      params,\n      id: this._nextId++,\n      jsonrpc: '2.0'\n    };\n\n    // START MODIFIED CODE\n    const connection = { ...this.connection };\n    connection.headers!['Alchemy-Ethers-Sdk-Method'] = methodName;\n\n    if (this.batchRequests || forceBatch) {\n      return this.batcher.enqueueRequest(request as JsonRpcRequest);\n    }\n    // END MODIFIED CODE\n\n    this.emit('debug', {\n      action: 'request',\n      request: deepCopy(request),\n      provider: this\n    });\n\n    // We can expand this in the future to any call, but for now these\n    // are the biggest wins and do not require any serializing parameters.\n    const cache = ['eth_chainId', 'eth_blockNumber'].indexOf(method) >= 0;\n    if (cache && this._cache[method]) {\n      return this._cache[method];\n    }\n\n    const result = fetchJson(\n      this.connection,\n      JSON.stringify(request),\n      getResult\n    ).then(\n      result => {\n        this.emit('debug', {\n          action: 'response',\n          request,\n          response: result,\n          provider: this\n        });\n\n        return result;\n      },\n      error => {\n        this.emit('debug', {\n          action: 'response',\n          error,\n          request,\n          provider: this\n        });\n\n        throw error;\n      }\n    );\n\n    // Cache the fetch, but clear it on the next event loop\n    if (cache) {\n      this._cache[method] = result;\n      setTimeout(() => {\n        // @ts-ignore - This is done by ethers.\n        this._cache[method] = null;\n      }, 0);\n    }\n\n    return result;\n  }\n\n  /**\n   * Overrides the base `Formatter` class inherited from ethers to support\n   * returning custom fields in Ethers response types.\n   *\n   * For context, ethers has a `Formatter` class that is used to format the\n   * response from a JSON-RPC request. Any fields that are not defined in the\n   * `Formatter` class are removed from the returned response. By modifying the\n   * `Formatter` class in this method, we can add support for fields that are\n   * not defined in ethers.\n   */\n  private modifyFormatter(): void {\n    this.formatter.formats['receiptLog']['removed'] = val => {\n      if (typeof val === 'boolean') {\n        return val;\n      }\n      return undefined;\n    };\n  }\n}\n\n/**\n * DO NOT MODIFY.\n *\n * Original code copied over from ether.js's\n * `@ethersproject/web/src.ts/index.ts`. Used to support\n * {@link AlchemyProvider._send}, which is also copied over.\n */\nfunction getResult(payload: {\n  error?: { code?: number; data?: any; message?: string };\n  result?: any;\n}): any {\n  if (payload.error) {\n    const error: any = new Error(payload.error.message);\n    error.code = payload.error.code;\n    error.data = payload.error.data;\n    throw error;\n  }\n\n  return payload.result;\n}\n","import { AlchemyWebSocketProvider } from '../api/alchemy-websocket-provider';\nimport { fromHex, toHex } from '../api/util';\n\nexport interface BatchPart {\n  method: string;\n  params?: any;\n}\n\nexport interface NewHeadsEvent {\n  author: string;\n  difficulty: string;\n  extraData: string;\n  gasLimit: string;\n  gasUsed: string;\n  hash: string;\n  logsBloom: string;\n  miner: string;\n  mixHash: string;\n  nonce: string;\n  number: string;\n  parentHash: string;\n  receiptsRoot: string;\n  sealFields: string[];\n  sha3Uncles: string;\n  size: string;\n  stateRoot: string;\n  timestamp: string;\n  transactionsRoot: string;\n}\n\n/** The return type of eth_getBlocksByHash. */\nexport interface BlockHead extends NewHeadsEvent {\n  totalDifficulty: string;\n  transactions: any[];\n  uncles: string[];\n}\n\nexport interface LogsEvent {\n  address: string;\n  blockHash: string;\n  blockNumber: string;\n  data: string;\n  logIndex: string;\n  topics: string[];\n  transactionHash: string;\n  transactionIndex: string;\n  removed?: boolean;\n}\n\nexport interface LogsSubscriptionFilter {\n  address?: string | string[];\n  topics?: Array<string | string[] | null>;\n}\n\nexport interface GetLogsOptions extends LogsSubscriptionFilter {\n  fromBlock?: string;\n  toBlock?: string;\n}\n\ninterface CommonAncestor {\n  blockNumber: number;\n  logIndex: number;\n}\n\n/**\n * The maximum number of blocks to backfill. If more than this many blocks have\n * been missed, then we'll sadly miss data, but we want to make sure we don't\n * end up requesting thousands of blocks if somebody left their laptop closed for a week.\n */\nconst MAX_BACKFILL_BLOCKS = 120;\n\n/**\n * The WebsocketBackfiller fetches events that were sent since a provided block\n * number. This is used in the {@link AlchemyWebSocketProvider} to backfill\n * events that were transmitted while the websocket connection was down.\n *\n * The backfiller backfills two main eth_subscribe events: `logs` and `newHeads`.\n *\n * @internal\n */\nexport class WebsocketBackfiller {\n  // TODO: Use HTTP provider to do backfill.\n  private maxBackfillBlocks = MAX_BACKFILL_BLOCKS;\n  constructor(private readonly provider: AlchemyWebSocketProvider) {}\n\n  /**\n   * Runs backfill for `newHeads` events.\n   *\n   * @param isCancelled Whether the backfill request is cancelled.\n   * @param previousHeads Previous head requests that were sent.\n   * @param fromBlockNumber The block number to start backfilling from.\n   * @returns A list of `newHeads` events that were sent since the last backfill.\n   */\n  async getNewHeadsBackfill(\n    isCancelled: () => boolean,\n    previousHeads: NewHeadsEvent[],\n    fromBlockNumber: number\n  ): Promise<NewHeadsEvent[]> {\n    throwIfCancelled(isCancelled);\n    const toBlockNumber = await this.getBlockNumber();\n    throwIfCancelled(isCancelled);\n\n    // If there are no previous heads to fetch, return new heads since\n    // `fromBlockNumber`, or up to maxBackfillBlocks from the current head.\n    if (previousHeads.length === 0) {\n      return this.getHeadEventsInRange(\n        Math.max(fromBlockNumber, toBlockNumber - this.maxBackfillBlocks) + 1,\n        toBlockNumber + 1\n      );\n    }\n\n    // If the last emitted event is too far back in the past, there's no need\n    // to backfill for reorgs. Just fetch the last `maxBackfillBlocks` worth of\n    // new heads.\n    const lastSeenBlockNumber = fromHex(\n      previousHeads[previousHeads.length - 1].number\n    );\n    const minBlockNumber = toBlockNumber - this.maxBackfillBlocks + 1;\n    if (lastSeenBlockNumber <= minBlockNumber) {\n      return this.getHeadEventsInRange(minBlockNumber, toBlockNumber + 1);\n    }\n\n    // To capture all `newHeads` events, return all head events from the last\n    // seen block number to current + any of the previous heads that were re-orged.\n    const reorgHeads: NewHeadsEvent[] = await this.getReorgHeads(\n      isCancelled,\n      previousHeads\n    );\n    throwIfCancelled(isCancelled);\n    const intermediateHeads: NewHeadsEvent[] = await this.getHeadEventsInRange(\n      lastSeenBlockNumber + 1,\n      toBlockNumber + 1\n    );\n    throwIfCancelled(isCancelled);\n    return [...reorgHeads, ...intermediateHeads];\n  }\n\n  /**\n   * Runs backfill for `logs` events.\n   *\n   * @param isCancelled Whether the backfill request is cancelled.\n   * @param filter The filter object that accompanies a logs subscription.\n   * @param previousLogs Previous log requests that were sent.\n   * @param fromBlockNumber The block number to start backfilling from.\n   */\n  async getLogsBackfill(\n    isCancelled: () => boolean,\n    filter: LogsSubscriptionFilter,\n    previousLogs: LogsEvent[],\n    fromBlockNumber: number\n  ): Promise<LogsEvent[]> {\n    throwIfCancelled(isCancelled);\n    const toBlockNumber = await this.getBlockNumber();\n    throwIfCancelled(isCancelled);\n\n    // If there are no previous logs to fetch, return new logs since\n    // `fromBlockNumber`, or up to `maxBackfillBlocks` from the current head.\n    if (previousLogs.length === 0) {\n      return this.getLogsInRange(\n        filter,\n        Math.max(fromBlockNumber, toBlockNumber - this.maxBackfillBlocks) + 1,\n        toBlockNumber + 1\n      );\n    }\n\n    // If the last emitted log is too far back in the past, there's no need\n    // to backfill for removed logs. Just fetch the last `maxBackfillBlocks`\n    // worth of logs.\n    const lastSeenBlockNumber = fromHex(\n      previousLogs[previousLogs.length - 1].blockNumber\n    );\n    const minBlockNumber = toBlockNumber - this.maxBackfillBlocks + 1;\n    if (lastSeenBlockNumber < minBlockNumber) {\n      return this.getLogsInRange(filter, minBlockNumber, toBlockNumber + 1);\n    }\n\n    // Return all log events that have happened along with log events that have\n    // been removed due to a chain reorg.\n    const commonAncestor = await this.getCommonAncestor(\n      isCancelled,\n      previousLogs\n    );\n    throwIfCancelled(isCancelled);\n\n    // All previous logs with a block number greater than the common ancestor\n    // were part of a re-org, so mark them as such.\n    const removedLogs = previousLogs\n      .filter(log => fromHex(log.blockNumber) > commonAncestor.blockNumber)\n      .map(log => ({ ...log, removed: true }));\n\n    // If no common ancestor was found, start backfill from the oldest log's\n    // block number.\n    const fromBlockInclusive =\n      commonAncestor.blockNumber === Number.NEGATIVE_INFINITY\n        ? fromHex(previousLogs[0].blockNumber)\n        : commonAncestor.blockNumber;\n    let addedLogs = await this.getLogsInRange(\n      filter,\n      fromBlockInclusive,\n      toBlockNumber + 1\n    );\n\n    // De-dupe any logs that were already emitted.\n    addedLogs = addedLogs.filter(\n      log =>\n        log &&\n        (fromHex(log.blockNumber) > commonAncestor.blockNumber ||\n          fromHex(log.logIndex) > commonAncestor.logIndex)\n    );\n\n    throwIfCancelled(isCancelled);\n    return [...removedLogs, ...addedLogs];\n  }\n\n  /**\n   * Sets a new max backfill blocks. VISIBLE ONLY FOR TESTING.\n   *\n   * @internal\n   */\n  setMaxBackfillBlock(newMax: number): void {\n    this.maxBackfillBlocks = newMax;\n  }\n\n  /**\n   * Gets the current block number as a number.\n   *\n   * @private\n   */\n  private async getBlockNumber(): Promise<number> {\n    const blockNumberHex: string = await this.provider.send('eth_blockNumber');\n    return fromHex(blockNumberHex);\n  }\n\n  /**\n   * Gets all `newHead` events in the provided range. Note that the returned\n   * heads do not include re-orged heads. Use {@link getReorgHeads} to find heads\n   * that were part of a re-org.\n   *\n   * @private\n   */\n  private async getHeadEventsInRange(\n    fromBlockInclusive: number,\n    toBlockExclusive: number\n  ): Promise<NewHeadsEvent[]> {\n    if (fromBlockInclusive >= toBlockExclusive) {\n      return [];\n    }\n    const batchParts: BatchPart[] = [];\n    for (let i = fromBlockInclusive; i < toBlockExclusive; i++) {\n      batchParts.push({\n        method: 'eth_getBlockByNumber',\n        params: [toHex(i), false]\n      });\n    }\n\n    // TODO: handle errors\n    const blockHeads = await this.provider.sendBatch(batchParts);\n    return blockHeads.map(toNewHeadsEvent);\n  }\n\n  /**\n   * Returns all heads that were part of a reorg event.\n   *\n   * @private\n   */\n  private async getReorgHeads(\n    isCancelled: () => boolean,\n    previousHeads: NewHeadsEvent[]\n  ): Promise<NewHeadsEvent[]> {\n    const result: NewHeadsEvent[] = [];\n    // Iterate from the most recent head backwards in order to find the first\n    // block that was part of a re-org.\n    for (let i = previousHeads.length - 1; i >= 0; i--) {\n      const oldEvent = previousHeads[i];\n      const blockHead = await this.getBlockByNumber(fromHex(oldEvent.number));\n      throwIfCancelled(isCancelled);\n\n      // If the hashes match, then current head in the iteration was not re-orged.\n      if (oldEvent.hash === blockHead.hash) {\n        break;\n      }\n\n      result.push(toNewHeadsEvent(blockHead));\n    }\n    return result.reverse();\n  }\n\n  /**\n   * Simple wrapper around `eth_getBlockByNumber` that returns the complete\n   * block information for the provided block number.\n   *\n   * @private\n   */\n  private async getBlockByNumber(blockNumber: number): Promise<BlockHead> {\n    return this.provider.send('eth_getBlockByNumber', [\n      toHex(blockNumber),\n      false\n    ]);\n  }\n\n  /**\n   * Given a list of previous log events, finds the common block number from the\n   * logs that matches the block head.\n   *\n   * This can be used to identify which logs are part of a re-org.\n   *\n   * Returns 1 less than the oldest log's block number if no common ancestor was found.\n   *\n   * @private\n   */\n  private async getCommonAncestor(\n    isCancelled: () => boolean,\n    previousLogs: LogsEvent[]\n  ): Promise<CommonAncestor> {\n    // Iterate from the most recent head backwards in order to find the first\n    // block that was part of a re-org.\n    let blockHead = await this.getBlockByNumber(\n      fromHex(previousLogs[previousLogs.length - 1].blockNumber)\n    );\n    throwIfCancelled(isCancelled);\n    for (let i = previousLogs.length - 1; i >= 0; i--) {\n      const oldLog = previousLogs[i];\n\n      // Ensure that updated blocks are fetched every time the log's block number\n      // changes.\n      if (oldLog.blockNumber !== blockHead.number) {\n        blockHead = await this.getBlockByNumber(fromHex(oldLog.blockNumber));\n      }\n\n      // Since logs are ordered in ascending order, the first log that matches\n      // the hash should be the largest logIndex.\n      if (oldLog.blockHash === blockHead.hash) {\n        return {\n          blockNumber: fromHex(oldLog.blockNumber),\n          logIndex: fromHex(oldLog.logIndex)\n        };\n      }\n    }\n    return {\n      blockNumber: Number.NEGATIVE_INFINITY,\n      logIndex: Number.NEGATIVE_INFINITY\n    };\n  }\n\n  /**\n   * Gets all `logs` events in the provided range. Note that the returned logs\n   * do not include removed logs.\n   *\n   * @private\n   */ private async getLogsInRange(\n    filter: LogsSubscriptionFilter,\n    fromBlockInclusive: number,\n    toBlockExclusive: number\n  ): Promise<LogsEvent[]> {\n    if (fromBlockInclusive >= toBlockExclusive) {\n      return [];\n    }\n    const rangeFilter: GetLogsOptions = {\n      ...filter,\n      fromBlock: toHex(fromBlockInclusive),\n      toBlock: toHex(toBlockExclusive - 1)\n    };\n    return this.provider.send('eth_getLogs', [rangeFilter]);\n  }\n}\n\nfunction toNewHeadsEvent(head: BlockHead): NewHeadsEvent {\n  const result: NewHeadsEvent & Partial<BlockHead> = { ...head };\n  delete result.totalDifficulty;\n  delete result.transactions;\n  delete result.uncles;\n  return result;\n}\n\nexport function dedupeNewHeads(events: NewHeadsEvent[]): NewHeadsEvent[] {\n  return dedupe(events, event => event.hash);\n}\n\nexport function dedupeLogs(events: LogsEvent[]): LogsEvent[] {\n  return dedupe(events, event => `${event.blockHash}/${event.logIndex}`);\n}\n\nfunction dedupe<T>(items: T[], getKey: (item: T) => any): T[] {\n  const keysSeen: Set<any> = new Set();\n  const result: T[] = [];\n  items.forEach(item => {\n    const key = getKey(item);\n    if (!keysSeen.has(key)) {\n      keysSeen.add(key);\n      result.push(item);\n    }\n  });\n  return result;\n}\n\nconst CANCELLED = new Error('Cancelled');\nexport function throwIfCancelled(isCancelled: () => boolean): void {\n  if (isCancelled()) {\n    throw CANCELLED;\n  }\n}\n","import SturdyWebSocket from 'sturdy-websocket';\n\nimport { Listener } from '@ethersproject/abstract-provider';\nimport { BigNumber } from '@ethersproject/bignumber';\nimport {\n  Networkish,\n  getNetwork as getNetworkFromEthers\n} from '@ethersproject/networks';\nimport { Network as NetworkFromEthers } from '@ethersproject/networks/lib/types';\nimport {\n  CommunityResourcable,\n  WebSocketProvider\n} from '@ethersproject/providers';\n\nimport {\n  EthersEvent,\n  getAlchemyEventTag,\n  isAlchemyEvent,\n  verifyAlchemyEventName\n} from '../internal/ethers-event';\nimport {\n  ALCHEMY_EVENT_TYPES,\n  ALCHEMY_MINED_TRANSACTIONS_EVENT_TYPE,\n  ALCHEMY_PENDING_TRANSACTIONS_EVENT_TYPE,\n  JsonRpcRequest,\n  JsonRpcResponse,\n  SingleOrBatchResponse,\n  SubscriptionEvent,\n  WebSocketMessage\n} from '../internal/internal-types';\nimport {\n  BatchPart,\n  LogsEvent,\n  LogsSubscriptionFilter,\n  NewHeadsEvent,\n  WebsocketBackfiller,\n  dedupeLogs,\n  dedupeNewHeads,\n  throwIfCancelled\n} from '../internal/websocket-backfiller';\nimport { AlchemyEventType, AlchemySubscription } from '../types/types';\nimport {\n  CustomNetworks,\n  DEFAULT_ALCHEMY_API_KEY,\n  EthersNetwork,\n  noop\n} from '../util/const';\nimport { VERSION } from '../version';\nimport { AlchemyConfig } from './alchemy-config';\nimport { AlchemyProvider } from './alchemy-provider';\nimport { fromHex } from './util';\n\nconst HEARTBEAT_INTERVAL = 30000;\nconst HEARTBEAT_WAIT_TIME = 10000;\nconst BACKFILL_TIMEOUT = 60000;\nconst BACKFILL_RETRIES = 5;\n/**\n * Subscriptions have a memory of recent events they have sent so that in the\n * event that they disconnect and need to backfill, they can detect re-orgs.\n * Keep a buffer that goes back at least these many blocks, the maximum amount\n * at which we might conceivably see a re-org.\n *\n * Note that while our buffer goes back this many blocks, it may contain more\n * than this many elements, since in the case of logs subscriptions more than\n * one event may be emitted for a block.\n */\nconst RETAINED_EVENT_BLOCK_COUNT = 10;\n\n/**\n * SDK's custom implementation fo the ethers.js's 'AlchemyWebSocketProvider'.\n *\n * Do not call this constructor directly. Instead, instantiate an instance of\n * {@link Alchemy} and call {@link Alchemy.config.getWebSocketProvider()}.\n *\n * @public\n */\nexport class AlchemyWebSocketProvider\n  extends WebSocketProvider\n  implements CommunityResourcable\n{\n  _events: Array<EthersEvent> = [];\n  readonly apiKey: string;\n\n  // In the case of a WebSocket reconnection, all subscriptions are lost and we\n  // create new ones to replace them, but we want to create the illusion that\n  // the original subscriptions persist. Thus, maintain a mapping from the\n  // \"virtual\" subscription ids which are visible to the consumer to the\n  // \"physical\" subscription ids of the actual connections. This terminology is\n  // borrowed from virtual and physical memory, which has a similar mapping.\n  /** @internal */\n  private readonly virtualSubscriptionsById: Map<string, VirtualSubscription> =\n    new Map();\n  /** @internal */\n  private readonly virtualIdsByPhysicalId: Map<string, string> = new Map();\n  /** @internal */\n  private readonly backfiller: WebsocketBackfiller;\n  /** @internal */\n  private heartbeatIntervalId?: NodeJS.Timeout;\n  /** @internal */\n  private cancelBackfill: () => void;\n\n  /** @internal */\n  constructor(config: AlchemyConfig, wsConstructor?: any) {\n    // Normalize the API Key to a string.\n    const apiKey = AlchemyProvider.getApiKey(config.apiKey);\n\n    // Generate our own connection info with the correct endpoint URLs.\n    const alchemyNetwork = AlchemyProvider.getAlchemyNetwork(config.network);\n    const connection = AlchemyProvider.getAlchemyConnectionInfo(\n      alchemyNetwork,\n      apiKey,\n      'wss'\n    );\n\n    const protocol = `alchemy-sdk-${VERSION}`;\n\n    // Use the provided config URL override if it exists, otherwise use the created one.\n    const ws = new SturdyWebSocket(config.url ?? connection.url, protocol, {\n      wsConstructor: wsConstructor ?? getWebsocketConstructor()\n    });\n\n    // Normalize the Alchemy named network input to the network names used by\n    // ethers. This allows the parent super constructor in JsonRpcProvider to\n    // correctly set the network.\n    const ethersNetwork = EthersNetwork[alchemyNetwork];\n    super(ws as any, ethersNetwork);\n    this.apiKey = apiKey;\n\n    // Start heartbeat and backfiller for the websocket connection.\n    this.backfiller = new WebsocketBackfiller(this);\n    this.addSocketListeners();\n    this.startHeartbeat();\n    this.cancelBackfill = noop;\n  }\n\n  /**\n   * Overrides the `BaseProvider.getNetwork` method as implemented by ethers.js.\n   *\n   * This override allows the SDK to set the provider's network to values not\n   * yet supported by ethers.js.\n   *\n   * @internal\n   * @override\n   */\n  static getNetwork(network: Networkish): NetworkFromEthers {\n    if (typeof network === 'string' && network in CustomNetworks) {\n      return CustomNetworks[network];\n    }\n\n    // Call the standard ethers.js getNetwork method for other networks.\n    return getNetworkFromEthers(network);\n  }\n\n  /**\n   * Overridden implementation of ethers that includes Alchemy based subscriptions.\n   *\n   * @param eventName Event to subscribe to\n   * @param listener The listener function to call when the event is triggered.\n   * @override\n   * @public\n   */\n  // TODO: Override `Listener` type to get type autocompletions.\n  on(eventName: AlchemyEventType, listener: Listener): this {\n    return this._addEventListener(eventName, listener, false);\n  }\n\n  /**\n   * Overridden implementation of ethers that includes Alchemy based\n   * subscriptions. Adds a listener to the triggered for only the next\n   * {@link eventName} event, after which it will be removed.\n   *\n   * @param eventName Event to subscribe to\n   * @param listener The listener function to call when the event is triggered.\n   * @override\n   * @public\n   */\n  // TODO: Override `Listener` type to get type autocompletions.\n  once(eventName: AlchemyEventType, listener: Listener): this {\n    return this._addEventListener(eventName, listener, true);\n  }\n\n  /**\n   * Removes the provided {@link listener} for the {@link eventName} event. If no\n   * listener is provided, all listeners for the event will be removed.\n   *\n   * @param eventName Event to unlisten to.\n   * @param listener The listener function to remove.\n   * @override\n   * @public\n   */\n  off(eventName: AlchemyEventType, listener?: Listener): this {\n    if (isAlchemyEvent(eventName)) {\n      return this._off(eventName, listener);\n    } else {\n      return super.off(eventName, listener);\n    }\n  }\n\n  /**\n   * Remove all listeners for the provided {@link eventName} event. If no event\n   * is provided, all events and their listeners are removed.\n   *\n   * @param eventName The event to remove all listeners for.\n   * @override\n   * @public\n   */\n  removeAllListeners(eventName?: AlchemyEventType): this {\n    if (eventName !== undefined && isAlchemyEvent(eventName)) {\n      return this._removeAllListeners(eventName);\n    } else {\n      return super.removeAllListeners(eventName);\n    }\n  }\n\n  /**\n   * Returns the number of listeners for the provided {@link eventName} event. If\n   * no event is provided, the total number of listeners for all events is returned.\n   *\n   * @param eventName The event to get the number of listeners for.\n   * @public\n   * @override\n   */\n  listenerCount(eventName?: AlchemyEventType): number {\n    if (eventName !== undefined && isAlchemyEvent(eventName)) {\n      return this._listenerCount(eventName);\n    } else {\n      return super.listenerCount(eventName);\n    }\n  }\n\n  /**\n   * Returns an array of listeners for the provided {@link eventName} event. If\n   * no event is provided, all listeners will be included.\n   *\n   * @param eventName The event to get the listeners for.\n   * @public\n   * @override\n   */\n  listeners(eventName?: AlchemyEventType): Array<Listener> {\n    if (eventName !== undefined && isAlchemyEvent(eventName)) {\n      return this._listeners(eventName);\n    } else {\n      return super.listeners(eventName);\n    }\n  }\n\n  /**\n   * Overrides the method in `BaseProvider` in order to properly format the\n   * Alchemy subscription events.\n   *\n   * @internal\n   * @override\n   */\n  _addEventListener(\n    eventName: AlchemyEventType,\n    listener: Listener,\n    once: boolean\n  ): this {\n    if (isAlchemyEvent(eventName)) {\n      verifyAlchemyEventName(eventName);\n      const event = new EthersEvent(\n        getAlchemyEventTag(eventName),\n        listener,\n        once\n      );\n      this._events.push(event);\n      this._startEvent(event);\n      return this;\n    } else {\n      return super._addEventListener(eventName, listener, once);\n    }\n  }\n\n  /**\n   * Overrides the `_startEvent()` method in ethers.js's\n   * {@link WebSocketProvider} to include additional alchemy methods.\n   *\n   * @param event\n   * @override\n   * @internal\n   */\n  _startEvent(event: EthersEvent): void {\n    // Check if the event type is a custom Alchemy subscription.\n    const customLogicTypes = [...ALCHEMY_EVENT_TYPES, 'block', 'filter'];\n    if (customLogicTypes.includes(event.type)) {\n      this.customStartEvent(event);\n    } else {\n      super._startEvent(event);\n    }\n  }\n\n  /**\n   * Overridden from ethers.js's {@link WebSocketProvider}\n   *\n   * Modified in order to add mappings for backfilling.\n   *\n   * @internal\n   * @override\n   */\n  async _subscribe(\n    tag: string,\n    param: Array<any>,\n    processFunc: (result: any) => void,\n    event?: EthersEvent\n  ): Promise<void> {\n    let subIdPromise = this._subIds[tag];\n\n    // BEGIN MODIFIED CODE\n    const startingBlockNumber = await this.getBlockNumber();\n    // END MODIFIED CODE\n\n    if (subIdPromise == null) {\n      subIdPromise = Promise.all(param).then(param => {\n        return this.send('eth_subscribe', param);\n      });\n      this._subIds[tag] = subIdPromise;\n    }\n    const subId = await subIdPromise;\n\n    // BEGIN MODIFIED CODE\n    const resolvedParams = await Promise.all(param);\n    this.virtualSubscriptionsById.set(subId, {\n      event: event!,\n      method: 'eth_subscribe',\n      params: resolvedParams,\n      startingBlockNumber,\n      virtualId: subId,\n      physicalId: subId,\n      sentEvents: [],\n      isBackfilling: false,\n      backfillBuffer: []\n    });\n    this.virtualIdsByPhysicalId.set(subId, subId);\n\n    // END MODIFIED CODE\n\n    this._subs[subId] = { tag, processFunc };\n  }\n\n  /**\n   * DO NOT MODIFY.\n   *\n   * Original code copied over from ether.js's `BaseProvider`.\n   *\n   * This method is copied over directly in order to implement Alchemy's unique\n   * subscription types. The only difference is that this method calls\n   * {@link getAlchemyEventTag} instead of the original `getEventTag()` method in\n   * order to parse the Alchemy subscription event.\n   *\n   * @internal\n   * @override\n   */\n  emit(eventName: AlchemyEventType, ...args: Array<any>): boolean {\n    if (isAlchemyEvent(eventName)) {\n      let result = false;\n\n      const stopped: Array<EthersEvent> = [];\n\n      // This line is the only modified line from the original method.\n      const eventTag = getAlchemyEventTag(eventName);\n\n      this._events = this._events.filter(event => {\n        if (event.tag !== eventTag) {\n          return true;\n        }\n\n        setTimeout(() => {\n          event.listener.apply(this, args);\n        }, 0);\n\n        result = true;\n\n        if (event.once) {\n          stopped.push(event);\n          return false;\n        }\n\n        return true;\n      });\n\n      stopped.forEach(event => {\n        this._stopEvent(event);\n      });\n\n      return result;\n    } else {\n      return super.emit(eventName, ...args);\n    }\n  }\n\n  /** @internal */\n  async sendBatch(parts: BatchPart[]): Promise<any[]> {\n    let nextId = 0;\n    const payload: JsonRpcRequest[] = parts.map(({ method, params }) => {\n      return {\n        method,\n        params,\n        jsonrpc: '2.0',\n        id: `alchemy-sdk:${nextId++}`\n      };\n    });\n\n    return this.sendBatchConcurrently(payload);\n  }\n\n  /** @override */\n  destroy(): Promise<void> {\n    this.removeSocketListeners();\n    this.stopHeartbeatAndBackfill();\n    return super.destroy();\n  }\n\n  /**\n   * Overrides the ether's `isCommunityResource()` method. Returns true if the\n   * current api key is the default key.\n   *\n   * @override\n   */\n  isCommunityResource(): boolean {\n    return this.apiKey === DEFAULT_ALCHEMY_API_KEY;\n  }\n\n  /**\n   * DO NOT MODIFY.\n   *\n   * Original code copied over from ether.js's `WebSocketProvider._stopEvent()`.\n   *\n   * This method is copied over directly in order to support Alchemy's\n   * subscription type by allowing the provider to properly stop Alchemy's\n   * subscription events.\n   *\n   * @internal\n   */\n  _stopEvent(event: EthersEvent): void {\n    let tag = event.tag;\n\n    // START MODIFIED CODE\n    if (ALCHEMY_EVENT_TYPES.includes(event.type)) {\n      // There are remaining pending transaction listeners.\n      if (\n        this._events.filter(e => ALCHEMY_EVENT_TYPES.includes(e.type)).length\n      ) {\n        return;\n      }\n      // END MODIFIED CODE\n    } else if (event.type === 'tx') {\n      // There are remaining transaction event listeners\n      if (this._events.filter(e => e.type === 'tx').length) {\n        return;\n      }\n      tag = 'tx';\n    } else if (this.listenerCount(event.event)) {\n      // There are remaining event listeners\n      return;\n    }\n\n    const subId = this._subIds[tag];\n    if (!subId) {\n      return;\n    }\n\n    delete this._subIds[tag];\n    void subId.then(subId => {\n      if (!this._subs[subId]) {\n        return;\n      }\n      delete this._subs[subId];\n      void this.send('eth_unsubscribe', [subId]);\n    });\n  }\n\n  /** @internal */\n  private addSocketListeners(): void {\n    this._websocket.addEventListener('message', this.handleMessage);\n    this._websocket.addEventListener('reopen', this.handleReopen);\n    this._websocket.addEventListener('down', this.stopHeartbeatAndBackfill);\n  }\n\n  /** @internal */\n  private removeSocketListeners(): void {\n    this._websocket.removeEventListener('message', this.handleMessage);\n    this._websocket.removeEventListener('reopen', this.handleReopen);\n    this._websocket.removeEventListener('down', this.stopHeartbeatAndBackfill);\n  }\n\n  /**\n   * The underlying ethers {@link WebSocketProvider} already handles and emits\n   * messages. To allow backfilling, track all messages that are emitted.\n   *\n   * This is a field arrow function in order to preserve `this` context when\n   * passing the method as an event listener.\n   *\n   * @internal\n   */\n  private handleMessage = (event: MessageEvent): void => {\n    const message: WebSocketMessage = JSON.parse(event.data);\n    if (!isSubscriptionEvent(message)) {\n      return;\n    }\n    const physicalId = message.params.subscription;\n    const virtualId = this.virtualIdsByPhysicalId.get(physicalId);\n    if (!virtualId) {\n      return;\n    }\n    const subscription = this.virtualSubscriptionsById.get(virtualId)!;\n    if (subscription.method !== 'eth_subscribe') {\n      return;\n    }\n\n    switch (subscription.params[0]) {\n      case 'newHeads': {\n        const newHeadsSubscription = subscription as NewHeadsSubscription;\n        const newHeadsMessage = message as SubscriptionEvent<NewHeadsEvent>;\n        const { isBackfilling, backfillBuffer } = newHeadsSubscription;\n        const { result } = newHeadsMessage.params;\n        if (isBackfilling) {\n          addToNewHeadsEventsBuffer(backfillBuffer, result);\n        } else if (physicalId !== virtualId) {\n          // In the case of a re-opened subscription, ethers will not emit the\n          // event, so the SDK has to.\n          this.emitAndRememberEvent(virtualId, result, getNewHeadsBlockNumber);\n        } else {\n          // Ethers subscription mapping will emit the event, just store it.\n          this.rememberEvent(virtualId, result, getNewHeadsBlockNumber);\n        }\n        break;\n      }\n      case 'logs': {\n        const logsSubscription = subscription as LogsSubscription;\n        const logsMessage = message as SubscriptionEvent<LogsEvent>;\n        const { isBackfilling, backfillBuffer } = logsSubscription;\n        const { result } = logsMessage.params;\n        if (isBackfilling) {\n          addToLogsEventsBuffer(backfillBuffer, result);\n        } else if (virtualId !== physicalId) {\n          this.emitAndRememberEvent(virtualId, result, getLogsBlockNumber);\n        } else {\n          this.rememberEvent(virtualId, result, getLogsBlockNumber);\n        }\n        break;\n      }\n      default:\n        if (physicalId !== virtualId) {\n          // In the case of a re-opened subscription, ethers will not emit the\n          // event, so the SDK has to.\n          const { result } = (message as SubscriptionEvent<unknown>).params;\n          this.emitEvent(virtualId, result);\n        }\n    }\n  };\n\n  /**\n   * When the websocket connection reopens:\n   *\n   * 1. Resubscribe to all existing subscriptions and start backfilling\n   * 2. Restart heart beat.\n   *\n   * This is a field arrow function in order to preserve `this` context when\n   * passing the method as an event listener.\n   *\n   * @internal\n   */\n  private handleReopen = () => {\n    this.virtualIdsByPhysicalId.clear();\n    const { cancel, isCancelled } = makeCancelToken();\n    this.cancelBackfill = cancel;\n    for (const subscription of this.virtualSubscriptionsById.values()) {\n      void (async () => {\n        try {\n          await this.resubscribeAndBackfill(isCancelled, subscription);\n        } catch (error) {\n          if (!isCancelled()) {\n            console.error(\n              `Error while backfilling \"${subscription.params[0]}\" subscription. Some events may be missing.`,\n              error\n            );\n          }\n        }\n      })();\n    }\n    this.startHeartbeat();\n  };\n\n  /**\n   * Reopens the backfill based on\n   *\n   * @param isCancelled\n   * @param subscription\n   * @internal\n   */\n  private async resubscribeAndBackfill(\n    isCancelled: () => boolean,\n    subscription: VirtualSubscription\n  ): Promise<void> {\n    const {\n      virtualId,\n      method,\n      params,\n      sentEvents,\n      backfillBuffer,\n      startingBlockNumber\n    } = subscription;\n    subscription.isBackfilling = true;\n    backfillBuffer.length = 0;\n    try {\n      const physicalId = await this.send(method, params);\n      throwIfCancelled(isCancelled);\n      subscription.physicalId = physicalId;\n      this.virtualIdsByPhysicalId.set(physicalId, virtualId);\n      switch (params[0]) {\n        case 'newHeads': {\n          const backfillEvents = await withBackoffRetries(\n            () =>\n              withTimeout(\n                this.backfiller.getNewHeadsBackfill(\n                  isCancelled,\n                  sentEvents,\n                  startingBlockNumber\n                ),\n                BACKFILL_TIMEOUT\n              ),\n            BACKFILL_RETRIES,\n            () => !isCancelled()\n          );\n          throwIfCancelled(isCancelled);\n          const events = dedupeNewHeads([...backfillEvents, ...backfillBuffer]);\n          events.forEach(event => this.emitNewHeadsEvent(virtualId, event));\n          break;\n        }\n        case 'logs': {\n          const filter: LogsSubscriptionFilter = params[1] || {};\n          const backfillEvents = await withBackoffRetries(\n            () =>\n              withTimeout(\n                this.backfiller.getLogsBackfill(\n                  isCancelled,\n                  filter,\n                  sentEvents,\n                  startingBlockNumber\n                ),\n                BACKFILL_TIMEOUT\n              ),\n            BACKFILL_RETRIES,\n            () => !isCancelled()\n          );\n          throwIfCancelled(isCancelled);\n          const events = dedupeLogs([...backfillEvents, ...backfillBuffer]);\n          events.forEach(event => this.emitLogsEvent(virtualId, event));\n          break;\n        }\n        default:\n          break;\n      }\n    } finally {\n      subscription.isBackfilling = false;\n      backfillBuffer.length = 0;\n    }\n  }\n\n  /**\n   * Cancels the heartbeat and any pending backfills being performed. This is\n   * called when the websocket connection goes down or is disconnected.\n   *\n   * This is a field arrow function in order to preserve `this` context when\n   * passing the method as an event listener.\n   *\n   * @internal\n   */\n  private stopHeartbeatAndBackfill = () => {\n    if (this.heartbeatIntervalId != null) {\n      clearInterval(this.heartbeatIntervalId);\n      this.heartbeatIntervalId = undefined;\n    }\n    this.cancelBackfill();\n  };\n\n  /** @internal */\n  private emitNewHeadsEvent(virtualId: string, result: NewHeadsEvent): void {\n    this.emitAndRememberEvent(virtualId, result, getNewHeadsBlockNumber);\n  }\n\n  /** @internal */\n  private emitLogsEvent(virtualId: string, result: LogsEvent): void {\n    this.emitAndRememberEvent(virtualId, result, getLogsBlockNumber);\n  }\n\n  /**\n   * Emits an event to consumers, but also remembers it in its subscriptions's\n   * `sentEvents` buffer so that we can detect re-orgs if the connection drops\n   * and needs to be reconnected.\n   *\n   * @internal\n   */\n  private emitAndRememberEvent<T>(\n    virtualId: string,\n    result: T,\n    getBlockNumber: (result: T) => number\n  ): void {\n    this.rememberEvent(virtualId, result, getBlockNumber);\n    this.emitEvent(virtualId, result);\n  }\n\n  private emitEvent<T>(virtualId: string, result: T): void {\n    const subscription = this.virtualSubscriptionsById.get(virtualId);\n    if (!subscription) {\n      return;\n    }\n    this.emitGenericEvent(subscription, result);\n  }\n\n  /** @internal */\n  private rememberEvent<T>(\n    virtualId: string,\n    result: T,\n    getBlockNumber: (result: T) => number\n  ): void {\n    const subscription = this.virtualSubscriptionsById.get(virtualId);\n    if (!subscription) {\n      return;\n    }\n    // Web3 modifies these event objects once we pass them on (changing hex\n    // numbers to numbers). We want the original event, so make a defensive\n    // copy.\n    addToPastEventsBuffer(\n      subscription.sentEvents,\n      { ...result },\n      getBlockNumber\n    );\n  }\n\n  /** @internal */\n  private emitGenericEvent(\n    subscription: VirtualSubscription,\n    result: any\n  ): void {\n    const emitFunction = this.emitProcessFn(subscription.event);\n    emitFunction(result);\n  }\n\n  /**\n   * Starts a heartbeat that pings the websocket server periodically to ensure\n   * that the connection stays open.\n   *\n   * @internal\n   */\n  private startHeartbeat(): void {\n    if (this.heartbeatIntervalId != null) {\n      return;\n    }\n    this.heartbeatIntervalId = setInterval(async () => {\n      try {\n        await withTimeout(this.send('net_version'), HEARTBEAT_WAIT_TIME);\n      } catch {\n        this._websocket.reconnect();\n      }\n    }, HEARTBEAT_INTERVAL);\n  }\n\n  /**\n   * This method sends the batch concurrently as individual requests rather than\n   * as a batch, which was the original implementation. The original batch logic\n   * is preserved in this implementation in order for faster porting.\n   *\n   * @param payload\n   * @internal\n   */\n  // TODO(cleanup): Refactor and remove usages of `sendBatch()`.\n  // TODO(errors): Use allSettled() once we have more error handling.\n  private async sendBatchConcurrently(\n    payload: JsonRpcRequest[]\n  ): Promise<unknown[]> {\n    return Promise.all(payload.map(req => this.send(req.method, req.params)));\n  }\n\n  /** @internal */\n  private customStartEvent(event: EthersEvent): void {\n    if (event.type === ALCHEMY_PENDING_TRANSACTIONS_EVENT_TYPE) {\n      const { fromAddress, toAddress, hashesOnly } = event;\n      void this._subscribe(\n        event.tag,\n        [\n          AlchemySubscription.PENDING_TRANSACTIONS,\n          { fromAddress, toAddress, hashesOnly }\n        ],\n        this.emitProcessFn(event),\n        event\n      );\n    } else if (event.type === ALCHEMY_MINED_TRANSACTIONS_EVENT_TYPE) {\n      const { addresses, includeRemoved, hashesOnly } = event;\n      void this._subscribe(\n        event.tag,\n        [\n          AlchemySubscription.MINED_TRANSACTIONS,\n          { addresses, includeRemoved, hashesOnly }\n        ],\n        this.emitProcessFn(event),\n        event\n      );\n    } else if (event.type === 'block') {\n      void this._subscribe(\n        'block',\n        ['newHeads'],\n        this.emitProcessFn(event),\n        event\n      );\n    } else if (event.type === 'filter') {\n      void this._subscribe(\n        event.tag,\n        ['logs', this._getFilter(event.filter)],\n        this.emitProcessFn(event),\n        event\n      );\n    }\n  }\n\n  /** @internal */\n  private emitProcessFn(event: EthersEvent): (result: any) => void {\n    switch (event.type) {\n      case ALCHEMY_PENDING_TRANSACTIONS_EVENT_TYPE:\n        return result =>\n          this.emit(\n            {\n              method: AlchemySubscription.PENDING_TRANSACTIONS,\n              fromAddress: event.fromAddress,\n              toAddress: event.toAddress,\n              hashesOnly: event.hashesOnly\n            },\n            result\n          );\n      case ALCHEMY_MINED_TRANSACTIONS_EVENT_TYPE:\n        return result =>\n          this.emit(\n            {\n              method: AlchemySubscription.MINED_TRANSACTIONS,\n              addresses: event.addresses,\n              includeRemoved: event.includeRemoved,\n              hashesOnly: event.hashesOnly\n            },\n            result\n          );\n      case 'block':\n        return result => {\n          const blockNumber = BigNumber.from(result.number).toNumber();\n          this._emitted.block = blockNumber;\n          this.emit('block', blockNumber);\n        };\n      case 'filter':\n        return result => {\n          if (result.removed == null) {\n            result.removed = false;\n          }\n          this.emit(event.filter, this.formatter.filterLog(result));\n        };\n      default:\n        throw new Error('Invalid event type to `emitProcessFn()`');\n    }\n  }\n\n  /**\n   * DO NOT MODIFY.\n   *\n   * Original code copied over from ether.js's `BaseProvider.off()`.\n   *\n   * This method is copied over directly in order to implement Alchemy's unique\n   * subscription types. The only difference is that this method calls\n   * {@link getAlchemyEventTag} instead of the original `getEventTag()` method in\n   * order to parse the Alchemy subscription event.\n   *\n   * @private\n   */\n  private _off(eventName: AlchemyEventType, listener?: Listener): this {\n    if (listener == null) {\n      return this.removeAllListeners(eventName);\n    }\n\n    const stopped: Array<EthersEvent> = [];\n\n    let found = false;\n    const eventTag = getAlchemyEventTag(eventName);\n    this._events = this._events.filter(event => {\n      if (event.tag !== eventTag || event.listener != listener) {\n        return true;\n      }\n      if (found) {\n        return true;\n      }\n      found = true;\n      stopped.push(event);\n      return false;\n    });\n\n    stopped.forEach(event => {\n      this._stopEvent(event);\n    });\n\n    return this;\n  }\n\n  /**\n   * DO NOT MODIFY.\n   *\n   * Original code copied over from ether.js's `BaseProvider.removeAllListeners()`.\n   *\n   * This method is copied over directly in order to implement Alchemy's unique\n   * subscription types. The only difference is that this method calls\n   * {@link getAlchemyEventTag} instead of the original `getEventTag()` method in\n   * order to parse the Alchemy subscription event.\n   *\n   * @private\n   */\n  private _removeAllListeners(eventName: AlchemyEventType): this {\n    let stopped: Array<EthersEvent> = [];\n    if (eventName == null) {\n      stopped = this._events;\n\n      this._events = [];\n    } else {\n      const eventTag = getAlchemyEventTag(eventName);\n      this._events = this._events.filter(event => {\n        if (event.tag !== eventTag) {\n          return true;\n        }\n        stopped.push(event);\n        return false;\n      });\n    }\n\n    stopped.forEach(event => {\n      this._stopEvent(event);\n    });\n\n    return this;\n  }\n\n  /**\n   * DO NOT MODIFY.\n   *\n   * Original code copied over from ether.js's `BaseProvider.listenerCount()`.\n   *\n   * This method is copied over directly in order to implement Alchemy's unique\n   * subscription types. The only difference is that this method calls\n   * {@link getAlchemyEventTag} instead of the original `getEventTag()` method in\n   * order to parse the Alchemy subscription event.\n   *\n   * @private\n   */\n  private _listenerCount(eventName?: AlchemyEventType): number {\n    if (!eventName) {\n      return this._events.length;\n    }\n\n    const eventTag = getAlchemyEventTag(eventName);\n    return this._events.filter(event => {\n      return event.tag === eventTag;\n    }).length;\n  }\n\n  /**\n   * DO NOT MODIFY.\n   *\n   * Original code copied over from ether.js's `BaseProvider.listeners()`.\n   *\n   * This method is copied over directly in order to implement Alchemy's unique\n   * subscription types. The only difference is that this method calls\n   * {@link getAlchemyEventTag} instead of the original `getEventTag()` method in\n   * order to parse the Alchemy subscription event.\n   *\n   * @private\n   */\n  private _listeners(eventName?: AlchemyEventType): Array<Listener> {\n    if (eventName == null) {\n      return this._events.map(event => event.listener);\n    }\n\n    const eventTag = getAlchemyEventTag(eventName);\n    return this._events\n      .filter(event => event.tag === eventTag)\n      .map(event => event.listener);\n  }\n}\n\nfunction getWebsocketConstructor(): any {\n  return isNodeEnvironment() ? require('websocket').w3cwebsocket : WebSocket;\n}\n\nfunction isNodeEnvironment(): boolean {\n  return (\n    typeof process !== 'undefined' &&\n    process != null &&\n    process.versions != null &&\n    process.versions.node != null\n  );\n}\n\n/** @internal */\ninterface CancelToken {\n  cancel(): void;\n  isCancelled(): boolean;\n}\n\ninterface VirtualSubscription {\n  event: EthersEvent;\n  virtualId: string;\n  physicalId: string;\n  method: string;\n  params: any[];\n  isBackfilling: boolean;\n  startingBlockNumber: number;\n  sentEvents: any[];\n  backfillBuffer: any[];\n}\n\ninterface NewHeadsSubscription extends VirtualSubscription {\n  method: 'eth_subscribe';\n  params: ['newHeads'];\n  isBackfilling: boolean;\n  sentEvents: NewHeadsEvent[];\n  backfillBuffer: NewHeadsEvent[];\n}\n\ninterface LogsSubscription extends VirtualSubscription {\n  method: 'eth_subscribe';\n  params: ['logs', LogsSubscriptionFilter?];\n  isBackfilling: boolean;\n  sentEvents: LogsEvent[];\n  backfillBuffer: LogsEvent[];\n}\n\n// TODO(cleanup): Use class variable rather than passing `isCancelled` everywhere.\nfunction makeCancelToken(): CancelToken {\n  let cancelled = false;\n  return { cancel: () => (cancelled = true), isCancelled: () => cancelled };\n}\n\n// TODO(cleanup): replace with SDK's backoff implementation\nconst MIN_RETRY_DELAY = 1000;\nconst RETRY_BACKOFF_FACTOR = 2;\nconst MAX_RETRY_DELAY = 30000;\n\nasync function withBackoffRetries<T>(\n  f: () => Promise<T>,\n  retryCount: number,\n  shouldRetry: (error: unknown) => boolean = () => true\n): Promise<T> {\n  let nextWaitTime = 0;\n  let i = 0;\n  while (true) {\n    try {\n      return await f();\n    } catch (error) {\n      i++;\n      if (i >= retryCount || !shouldRetry(error)) {\n        throw error;\n      }\n      await delay(nextWaitTime);\n      if (!shouldRetry(error)) {\n        throw error;\n      }\n      nextWaitTime =\n        nextWaitTime === 0\n          ? MIN_RETRY_DELAY\n          : Math.min(MAX_RETRY_DELAY, RETRY_BACKOFF_FACTOR * nextWaitTime);\n    }\n  }\n}\n\nfunction delay(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nfunction withTimeout<T>(promise: Promise<T>, ms: number): Promise<T> {\n  return Promise.race([\n    promise,\n    new Promise<T>((_, reject) =>\n      setTimeout(() => reject(new Error('Timeout')), ms)\n    )\n  ]);\n}\n\nfunction getNewHeadsBlockNumber(event: NewHeadsEvent): number {\n  return fromHex(event.number);\n}\n\nfunction getLogsBlockNumber(event: LogsEvent): number {\n  return fromHex(event.blockNumber);\n}\n\nfunction isResponse(\n  message: WebSocketMessage\n): message is SingleOrBatchResponse {\n  return (\n    Array.isArray(message) ||\n    (message.jsonrpc === '2.0' && (message as JsonRpcResponse).id !== undefined)\n  );\n}\n\nfunction isSubscriptionEvent(\n  message: WebSocketMessage\n): message is SubscriptionEvent {\n  return !isResponse(message);\n}\n\nfunction addToNewHeadsEventsBuffer(\n  pastEvents: NewHeadsEvent[],\n  event: NewHeadsEvent\n): void {\n  addToPastEventsBuffer(pastEvents, event, getNewHeadsBlockNumber);\n}\n\nfunction addToLogsEventsBuffer(\n  pastEvents: LogsEvent[],\n  event: LogsEvent\n): void {\n  addToPastEventsBuffer(pastEvents, event, getLogsBlockNumber);\n}\n\n/**\n * Adds a new event to an array of events, evicting any events which are so old\n * that they will no longer feasibly be part of a reorg.\n */\nfunction addToPastEventsBuffer<T>(\n  pastEvents: T[],\n  event: T,\n  getBlockNumber: (event: T) => number\n): void {\n  const currentBlockNumber = getBlockNumber(event);\n  // Find first index of an event recent enough to retain, then drop everything\n  // at a lower index.\n  const firstGoodIndex = pastEvents.findIndex(\n    e => getBlockNumber(e) > currentBlockNumber - RETAINED_EVENT_BLOCK_COUNT\n  );\n  if (firstGoodIndex === -1) {\n    pastEvents.length = 0;\n  } else {\n    pastEvents.splice(0, firstGoodIndex);\n  }\n  pastEvents.push(event);\n}\n","export interface Options {\n    allClearResetTime?: number;\n    connectTimeout?: number;\n    debug?: boolean;\n    minReconnectDelay?: number;\n    maxReconnectDelay?: number;\n    maxReconnectAttempts?: number;\n    reconnectBackoffFactor?: number;\n    wsConstructor?: new (url: string, protocols?: string | string[]) => any;\n    shouldReconnect?(closeEvent: CloseEvent): boolean | Promise<boolean>;\n}\n\ninterface SturdyWebSocketEventMap extends WebSocketEventMap {\n    down: CloseEvent;\n    reopen: Event;\n}\n\ntype WebSocketListener<K extends keyof SturdyWebSocketEventMap> = (\n    this: WebSocket,\n    event: SturdyWebSocketEventMap[K],\n) => any;\n\ntype WebSocketListeners = {\n    [K in keyof SturdyWebSocketEventMap]?: Array<WebSocketListener<K>>;\n} & {\n    [key: string]: EventListenerOrEventListenerObject[];\n};\n\nconst SHOULD_RECONNECT_FALSE_MESSAGE =\n    \"Provided shouldReconnect() returned false. Closing permanently.\";\nconst SHOULD_RECONNECT_PROMISE_FALSE_MESSAGE =\n    \"Provided shouldReconnect() resolved to false. Closing permanently.\";\n\nexport default class SturdyWebSocket implements WebSocket {\n    public static readonly DEFAULT_OPTIONS: Required<Options> = {\n        allClearResetTime: 5000,\n        connectTimeout: 5000,\n        debug: false,\n        minReconnectDelay: 1000,\n        maxReconnectDelay: 30000,\n        maxReconnectAttempts: Number.POSITIVE_INFINITY,\n        reconnectBackoffFactor: 1.5,\n        shouldReconnect: () => true,\n        wsConstructor: undefined!,\n    };\n\n    public static readonly CONNECTING = 0;\n    public static readonly OPEN = 1;\n    public static readonly CLOSING = 2;\n    public static readonly CLOSED = 3;\n\n    public onclose: ((event: CloseEvent) => void) | null = null;\n    public onerror: ((event: Event) => void) | null = null;\n    public onmessage: ((event: MessageEvent) => void) | null = null;\n    public onopen: ((event: Event) => void) | null = null;\n    public ondown: ((event: CloseEvent | undefined) => void) | null = null;\n    public onreopen: ((event: Event) => void) | null = null;\n    public readonly CONNECTING = SturdyWebSocket.CONNECTING;\n    public readonly OPEN = SturdyWebSocket.OPEN;\n    public readonly CLOSING = SturdyWebSocket.CLOSING;\n    public readonly CLOSED = SturdyWebSocket.CLOSED;\n\n    private readonly protocols?: string | string[];\n    private readonly options: Required<Options>;\n    private ws?: WebSocket;\n    private hasBeenOpened = false;\n    private isClosed = false;\n    private messageBuffer: any[] = [];\n    private nextRetryTime: number = 0;\n    private reconnectCount = 0;\n    private allClearTimeoutId?: any;\n    private connectTimeoutId?: any;\n    private binaryTypeInternal?: BinaryType;\n    private lastKnownExtensions = \"\";\n    private lastKnownProtocol = \"\";\n    private readonly listeners: WebSocketListeners = {};\n\n    constructor(url: string, options?: Options);\n    constructor(\n        url: string,\n        protocols: string | string[] | undefined,\n        options?: Options,\n    );\n    constructor(\n        public readonly url: string,\n        protocolsOrOptions?: string | string[] | Options,\n        options: Options = {},\n    ) {\n        if (\n            protocolsOrOptions == null ||\n            typeof protocolsOrOptions === \"string\" ||\n            Array.isArray(protocolsOrOptions)\n        ) {\n            this.protocols = protocolsOrOptions;\n        } else {\n            options = protocolsOrOptions;\n        }\n        this.options = applyDefaultOptions(options);\n        if (!this.options.wsConstructor) {\n            if (typeof WebSocket !== \"undefined\") {\n                this.options.wsConstructor = WebSocket;\n            } else {\n                throw new Error(\n                    \"WebSocket not present in global scope and no \" +\n                        \"wsConstructor option was provided.\",\n                );\n            }\n        }\n        this.openNewWebSocket();\n    }\n\n    public get binaryType(): BinaryType {\n        return this.binaryTypeInternal || \"blob\";\n    }\n\n    public set binaryType(binaryType: BinaryType) {\n        this.binaryTypeInternal = binaryType;\n        if (this.ws) {\n            this.ws.binaryType = binaryType;\n        }\n    }\n\n    public get bufferedAmount(): number {\n        let sum = this.ws ? this.ws.bufferedAmount : 0;\n        let hasUnknownAmount = false;\n        this.messageBuffer.forEach(data => {\n            const byteLength = getDataByteLength(data);\n            if (byteLength != null) {\n                sum += byteLength;\n            } else {\n                hasUnknownAmount = true;\n            }\n        });\n        if (hasUnknownAmount) {\n            this.debugLog(\n                \"Some buffered data had unknown length. bufferedAmount()\" +\n                    \" return value may be below the correct amount.\",\n            );\n        }\n        return sum;\n    }\n\n    public get extensions(): string {\n        return this.ws ? this.ws.extensions : this.lastKnownExtensions;\n    }\n\n    public get protocol(): string {\n        return this.ws ? this.ws.protocol : this.lastKnownProtocol;\n    }\n\n    public get readyState(): number {\n        return this.isClosed ? SturdyWebSocket.CLOSED : SturdyWebSocket.OPEN;\n    }\n\n    public close(code?: number, reason?: string): void {\n        this.disposeSocket(code, reason);\n        this.shutdown();\n        this.debugLog(\"WebSocket permanently closed by client.\");\n    }\n\n    public send(data: any): void {\n        if (this.isClosed) {\n            throw new Error(\"WebSocket is already in CLOSING or CLOSED state.\");\n        } else if (this.ws && this.ws.readyState === this.OPEN) {\n            this.ws.send(data);\n        } else {\n            this.messageBuffer.push(data);\n        }\n    }\n\n    public reconnect(): void {\n        if (this.isClosed) {\n            throw new Error(\n                \"Cannot call reconnect() on socket which is permanently closed.\",\n            );\n        }\n        this.disposeSocket(1000, \"Client requested reconnect.\");\n        this.handleClose(undefined);\n    }\n\n    public addEventListener<K extends keyof SturdyWebSocketEventMap>(\n        type: K,\n        listener: (this: WebSocket, event: SturdyWebSocketEventMap[K]) => void,\n    ): void;\n    public addEventListener(\n        type: string,\n        listener: EventListenerOrEventListenerObject,\n    ): void;\n    public addEventListener(\n        type: string,\n        listener: EventListenerOrEventListenerObject,\n    ): void {\n        if (!this.listeners[type]) {\n            this.listeners[type] = [];\n        }\n        this.listeners[type].push(listener);\n    }\n\n    public dispatchEvent(event: Event): boolean {\n        return this.dispatchEventOfType(event.type, event);\n    }\n\n    public removeEventListener<K extends keyof SturdyWebSocketEventMap>(\n        type: K,\n        listener: (this: WebSocket, event: SturdyWebSocketEventMap[K]) => void,\n    ): void;\n    public removeEventListener(\n        type: string,\n        listener: EventListenerOrEventListenerObject,\n    ): void;\n    public removeEventListener(\n        type: string,\n        listener: EventListenerOrEventListenerObject,\n    ): void {\n        if (this.listeners[type]) {\n            this.listeners[type] = this.listeners[type].filter(\n                l => l !== listener,\n            );\n        }\n    }\n\n    private openNewWebSocket(): void {\n        if (this.isClosed) {\n            return;\n        }\n        const { connectTimeout, wsConstructor } = this.options;\n        this.debugLog(`Opening new WebSocket to ${this.url}.`);\n        const ws: WebSocket = new wsConstructor(this.url, this.protocols);\n        ws.onclose = event => this.handleClose(event);\n        ws.onerror = event => this.handleError(event);\n        ws.onmessage = event => this.handleMessage(event);\n        ws.onopen = event => this.handleOpen(event);\n        this.connectTimeoutId = setTimeout(() => {\n            // If this is running, we still haven't opened the websocket.\n            // Kill it so we can try again.\n            this.clearConnectTimeout();\n            this.disposeSocket();\n            this.handleClose(undefined);\n        }, connectTimeout);\n        this.ws = ws;\n    }\n\n    private handleOpen(event: Event): void {\n        if (!this.ws || this.isClosed) {\n            return;\n        }\n        const { allClearResetTime } = this.options;\n        this.debugLog(\"WebSocket opened.\");\n        if (this.binaryTypeInternal != null) {\n            this.ws.binaryType = this.binaryTypeInternal;\n        } else {\n            this.binaryTypeInternal = this.ws.binaryType;\n        }\n        this.clearConnectTimeout();\n        if (this.hasBeenOpened) {\n            this.dispatchEventOfType(\"reopen\", event);\n        } else {\n            this.dispatchEventOfType(\"open\", event);\n            this.hasBeenOpened = true;\n        }\n        this.messageBuffer.forEach(message => this.send(message));\n        this.messageBuffer = [];\n        this.allClearTimeoutId = setTimeout(() => {\n            this.clearAllClearTimeout();\n            this.nextRetryTime = 0;\n            this.reconnectCount = 0;\n            const openTime = (allClearResetTime / 1000) | 0;\n            this.debugLog(\n                `WebSocket remained open for ${openTime} seconds. Resetting` +\n                    \" retry time and count.\",\n            );\n        }, allClearResetTime);\n    }\n\n    private handleMessage(event: MessageEvent): void {\n        if (this.isClosed) {\n            return;\n        }\n        this.dispatchEventOfType(\"message\", event);\n    }\n\n    private handleClose(event: CloseEvent | undefined): void {\n        if (this.isClosed) {\n            return;\n        }\n        const { maxReconnectAttempts, shouldReconnect } = this.options;\n        this.clearConnectTimeout();\n        this.clearAllClearTimeout();\n        if (this.ws) {\n            this.lastKnownExtensions = this.ws.extensions;\n            this.lastKnownProtocol = this.ws.protocol;\n            this.disposeSocket();\n        }\n        this.dispatchEventOfType(\"down\", event);\n        if (this.reconnectCount >= maxReconnectAttempts) {\n            this.stopReconnecting(\n                event,\n                this.getTooManyFailedReconnectsMessage(),\n            );\n            return;\n        }\n        const willReconnect = !event || shouldReconnect(event);\n        if (typeof willReconnect === \"boolean\") {\n            this.handleWillReconnect(\n                willReconnect,\n                event,\n                SHOULD_RECONNECT_FALSE_MESSAGE,\n            );\n        } else {\n            willReconnect.then(willReconnectResolved => {\n                if (this.isClosed) {\n                    return;\n                }\n                this.handleWillReconnect(\n                    willReconnectResolved,\n                    event,\n                    SHOULD_RECONNECT_PROMISE_FALSE_MESSAGE,\n                );\n            });\n        }\n    }\n\n    private handleError(event: Event): void {\n        this.dispatchEventOfType(\"error\", event);\n        this.debugLog(\"WebSocket encountered an error.\");\n    }\n\n    private handleWillReconnect(\n        willReconnect: boolean,\n        event: CloseEvent | undefined,\n        denialReason: string,\n    ): void {\n        if (willReconnect) {\n            this.reestablishConnection();\n        } else {\n            this.stopReconnecting(event, denialReason);\n        }\n    }\n\n    private reestablishConnection(): void {\n        const {\n            minReconnectDelay,\n            maxReconnectDelay,\n            reconnectBackoffFactor,\n        } = this.options;\n        this.reconnectCount++;\n        const retryTime = this.nextRetryTime;\n        this.nextRetryTime = Math.max(\n            minReconnectDelay,\n            Math.min(\n                this.nextRetryTime * reconnectBackoffFactor,\n                maxReconnectDelay,\n            ),\n        );\n        setTimeout(() => this.openNewWebSocket(), retryTime);\n        const retryTimeSeconds = (retryTime / 1000) | 0;\n        this.debugLog(\n            `WebSocket was closed. Re-opening in ${retryTimeSeconds} seconds.`,\n        );\n    }\n\n    private stopReconnecting(\n        event: CloseEvent | undefined,\n        debugReason: string,\n    ): void {\n        this.debugLog(debugReason);\n        this.shutdown();\n        if (event) {\n            this.dispatchEventOfType(\"close\", event);\n        }\n    }\n\n    private shutdown(): void {\n        this.isClosed = true;\n        this.clearAllTimeouts();\n        this.messageBuffer = [];\n        this.disposeSocket();\n    }\n\n    private disposeSocket(closeCode?: number, reason?: string): void {\n        if (!this.ws) {\n            return;\n        }\n        // Use noop handlers instead of null because some WebSocket\n        // implementations, such as the one from isomorphic-ws, raise a stink on\n        // unhandled events.\n        this.ws.onerror = noop;\n        this.ws.onclose = noop;\n        this.ws.onmessage = noop;\n        this.ws.onopen = noop;\n        this.ws.close(closeCode, reason);\n        this.ws = undefined;\n    }\n\n    private clearAllTimeouts(): void {\n        this.clearConnectTimeout();\n        this.clearAllClearTimeout();\n    }\n\n    private clearConnectTimeout(): void {\n        if (this.connectTimeoutId != null) {\n            clearTimeout(this.connectTimeoutId);\n            this.connectTimeoutId = undefined;\n        }\n    }\n\n    private clearAllClearTimeout(): void {\n        if (this.allClearTimeoutId != null) {\n            clearTimeout(this.allClearTimeoutId);\n            this.allClearTimeoutId = undefined;\n        }\n    }\n\n    private dispatchEventOfType(type: string, event: any): boolean {\n        switch (type) {\n            case \"close\":\n                if (this.onclose) {\n                    this.onclose(event);\n                }\n                break;\n            case \"error\":\n                if (this.onerror) {\n                    this.onerror(event);\n                }\n                break;\n            case \"message\":\n                if (this.onmessage) {\n                    this.onmessage(event);\n                }\n                break;\n            case \"open\":\n                if (this.onopen) {\n                    this.onopen(event);\n                }\n                break;\n            case \"down\":\n                if (this.ondown) {\n                    this.ondown(event);\n                }\n                break;\n            case \"reopen\":\n                if (this.onreopen) {\n                    this.onreopen(event);\n                }\n                break;\n        }\n        if (type in this.listeners) {\n            this.listeners[type]\n                .slice()\n                .forEach(listener => this.callListener(listener, event));\n        }\n        return !event || !(event as Event).defaultPrevented;\n    }\n\n    private callListener(\n        listener: EventListenerOrEventListenerObject,\n        event: Event,\n    ): void {\n        if (typeof listener === \"function\") {\n            listener.call(this, event);\n        } else {\n            listener.handleEvent.call(this, event);\n        }\n    }\n\n    private debugLog(message: string): void {\n        if (this.options.debug) {\n            // tslint:disable-next-line:no-console\n            console.log(message);\n        }\n    }\n\n    private getTooManyFailedReconnectsMessage(): string {\n        const { maxReconnectAttempts } = this.options;\n        return `Failed to reconnect after ${maxReconnectAttempts} ${pluralize(\n            \"attempt\",\n            maxReconnectAttempts,\n        )}. Closing permanently.`;\n    }\n}\n\nfunction applyDefaultOptions(options: Options): Required<Options> {\n    const result: any = {};\n    Object.keys(SturdyWebSocket.DEFAULT_OPTIONS).forEach(key => {\n        const value = (options as any)[key];\n        result[key] =\n            value === undefined\n                ? (SturdyWebSocket.DEFAULT_OPTIONS as any)[key]\n                : value;\n    });\n    return result;\n}\n\nfunction getDataByteLength(data: any): number | undefined {\n    if (typeof data === \"string\") {\n        // UTF-16 strings use two bytes per character.\n        return 2 * data.length;\n    } else if (data instanceof ArrayBuffer) {\n        return data.byteLength;\n    } else if (data instanceof Blob) {\n        return data.size;\n    } else {\n        return undefined;\n    }\n}\n\nfunction pluralize(s: string, n: number): string {\n    return n === 1 ? s : `${s}s`;\n}\n\nfunction noop(): void {\n    // Nothing.\n}\n","var _globalThis;\nif (typeof globalThis === 'object') {\n\t_globalThis = globalThis;\n} else {\n\ttry {\n\t\t_globalThis = require('es5-ext/global');\n\t} catch (error) {\n\t} finally {\n\t\tif (!_globalThis && typeof window !== 'undefined') { _globalThis = window; }\n\t\tif (!_globalThis) { throw new Error('Could not determine global this'); }\n\t}\n}\n\nvar NativeWebSocket = _globalThis.WebSocket || _globalThis.MozWebSocket;\nvar websocket_version = require('./version');\n\n\n/**\n * Expose a W3C WebSocket class with just one or two arguments.\n */\nfunction W3CWebSocket(uri, protocols) {\n\tvar native_instance;\n\n\tif (protocols) {\n\t\tnative_instance = new NativeWebSocket(uri, protocols);\n\t}\n\telse {\n\t\tnative_instance = new NativeWebSocket(uri);\n\t}\n\n\t/**\n\t * 'native_instance' is an instance of nativeWebSocket (the browser's WebSocket\n\t * class). Since it is an Object it will be returned as it is when creating an\n\t * instance of W3CWebSocket via 'new W3CWebSocket()'.\n\t *\n\t * ECMAScript 5: http://bclary.com/2004/11/07/#a-13.2.2\n\t */\n\treturn native_instance;\n}\nif (NativeWebSocket) {\n\t['CONNECTING', 'OPEN', 'CLOSING', 'CLOSED'].forEach(function(prop) {\n\t\tObject.defineProperty(W3CWebSocket, prop, {\n\t\t\tget: function() { return NativeWebSocket[prop]; }\n\t\t});\n\t});\n}\n\n/**\n * Module exports.\n */\nmodule.exports = {\n    'w3cwebsocket' : NativeWebSocket ? W3CWebSocket : null,\n    'version'      : websocket_version\n};\n","var naiveFallback = function () {\n\tif (typeof self === \"object\" && self) return self;\n\tif (typeof window === \"object\" && window) return window;\n\tthrow new Error(\"Unable to resolve global `this`\");\n};\n\nmodule.exports = (function () {\n\tif (this) return this;\n\n\t// Unexpected strict mode (may happen if e.g. bundled into ESM module)\n\n\t// Fallback to standard globalThis if available\n\tif (typeof globalThis === \"object\" && globalThis) return globalThis;\n\n\t// Thanks @mathiasbynens -> https://mathiasbynens.be/notes/globalthis\n\t// In all ES5+ engines global object inherits from Object.prototype\n\t// (if you approached one that doesn't please report)\n\ttry {\n\t\tObject.defineProperty(Object.prototype, \"__global__\", {\n\t\t\tget: function () { return this; },\n\t\t\tconfigurable: true\n\t\t});\n\t} catch (error) {\n\t\t// Unfortunate case of updates to Object.prototype being restricted\n\t\t// via preventExtensions, seal or freeze\n\t\treturn naiveFallback();\n\t}\n\ttry {\n\t\t// Safari case (window.__global__ works, but __global__ does not)\n\t\tif (!__global__) return naiveFallback();\n\t\treturn __global__;\n\t} finally {\n\t\tdelete Object.prototype.__global__;\n\t}\n})();\n","module.exports = require('../package.json').version;\n"],"sourceRoot":""}